{"version":3,"sources":["content/tips lazy /^/.//.*$/ groupOptions: {} namespace object","components/PageTip/_config/style.ts","components/PageTip/_partials/AsyncTip.tsx","components/PageTip/PageTip.tsx","data/healthChecks/HealthCheckLogic.ts","components/HealthCheck/Questionnaire/_config/styles.ts","components/HealthCheck/Questionnaire/_partials/OptionTile.tsx","components/NoClientError/NoClientError.tsx","components/HealthCheck/Questionnaire/Questionnaire.tsx","pages/HealthCheck/questionnaire.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","usePageTipStyles","makeStyles","theme","root","position","left","spacing","bottom","icon","marginRight","drawer","padding","maxWidth","width","closeBox","display","justifyContent","marginBottom","paddingBottom","borderBottom","borderBottomColor","palette","grey","borderBottomStyle","AsyncTip","loadable","props","tip","fallback","Loading","PageTip","style","useState","drawerOpen","setDrawerOpen","toggleDrawer","open","event","KeyboardEvent","type","key","className","Fab","color","onClick","variant","Drawer","anchor","onClose","classes","paper","Box","Typography","Button","startIcon","HealthCheckUseCase","HealthCheckDB","healthChecks","clientId","this","database","transaction","table","name","where","first","equals","toArray","ILogicLayer","useQuestionnaireStyles","actions","flexDirection","marginTop","breakpoints","up","down","subtitle","lineHeight","title","fontSize","typography","h5","useOptionTileStyles","cardContent","alignItems","OptionTile","optionKey","option","currentAnswer","changeAnswer","getOptionByAnswer","answerTheming","muiTheme","useTheme","Card","boxShadow","primary","main","CardActionArea","CardContent","Icon","NoClientError","useContext","ClientContext","state","currentClient","clientSynced","Questionnaire","useCurrentClient","styles","answers","setAnswers","questionCount","setQuestionCount","questions","currentQuestion","setCurrentQuestion","generateKey","history","useHistory","stepLabels","q","question","useEffect","answer","preventDefault","copy","isFinalQuestion","length","handleSubmit","a","alert","create","createdAt","newTimestamp","dbKey","push","routeVarReplacement","PrivateRoutes","HealthCheckSummary","console","error","stack","Stepper","activeStep","orientation","paddingLeft","paddingRight","label","Step","StepLabel","StepContent","Grid","container","options","idx","item","xs","sm","constructKey","disabled","endIcon","HCQuestionnaire","md","align","ExpandableNav","List","component","disablePadding","ListItem","button","Link","to","HealthCheckList","ListItemIcon","ListItemText"],"mappings":"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","file":"static/js/39.d6f1c86e.chunk.js","sourcesContent":["var map = {\n\t\"./ActionChecklistTip\": [\n\t\t803,\n\t\t3\n\t],\n\t\"./ActionChecklistTip.tsx\": [\n\t\t803,\n\t\t3\n\t],\n\t\"./CFCanvasTip\": [\n\t\t804,\n\t\t4\n\t],\n\t\"./CFCanvasTip.tsx\": [\n\t\t804,\n\t\t4\n\t],\n\t\"./ChangeLevers\": [\n\t\t805,\n\t\t5\n\t],\n\t\"./ChangeLevers.tsx\": [\n\t\t805,\n\t\t5\n\t],\n\t\"./ClientListTips\": [\n\t\t806,\n\t\t6\n\t],\n\t\"./ClientListTips.tsx\": [\n\t\t806,\n\t\t6\n\t],\n\t\"./CoachingKitTips\": [\n\t\t807,\n\t\t7\n\t],\n\t\"./CoachingKitTips.tsx\": [\n\t\t807,\n\t\t7\n\t],\n\t\"./DiscoverTopicsTips\": [\n\t\t808,\n\t\t8\n\t],\n\t\"./DiscoverTopicsTips.tsx\": [\n\t\t808,\n\t\t8\n\t],\n\t\"./HCQuestionnaire\": [\n\t\t809,\n\t\t9\n\t],\n\t\"./HCQuestionnaire.tsx\": [\n\t\t809,\n\t\t9\n\t],\n\t\"./style\": [\n\t\t801,\n\t\t10\n\t],\n\t\"./style.ts\": [\n\t\t801,\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 810;\nmodule.exports = webpackAsyncContext;","import { makeStyles } from \"@material-ui/core/styles\"\n\nconst usePageTipStyles = makeStyles((theme) => ({\n\troot: {\n\t\tposition: \"fixed\",\n\t\tleft: theme.spacing(2),\n\t\tbottom: theme.spacing(2),\n\t},\n\ticon: {\n\t\tmarginRight: theme.spacing(1),\n\t},\n\tdrawer: {\n\t\tpadding: theme.spacing(2),\n\t\tmaxWidth: \"350px\",\n\t\twidth: \"100%\",\n\t},\n\tcloseBox: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\tmarginBottom: theme.spacing(2),\n\t\tpaddingBottom: theme.spacing(2),\n\t\tborderBottom: 1,\n\t\tborderBottomColor: theme.palette.grey[500],\n\t\tborderBottomStyle: \"solid\",\n\t},\n}))\n\nexport default usePageTipStyles\n","import React from \"react\"\nimport loadable from \"@loadable/component\"\nimport Loading from \"../../Loading\"\n\n/**\n * Loadable component to dynamically render the tip content\n *\n */\nconst AsyncTip = loadable(\n\t(props: { tip: string }) => import(`../../../content/tips/${props.tip}`),\n\t{\n\t\tfallback: <Loading />,\n\t}\n)\n\nexport default AsyncTip\n","import React, { ReactElement, useState, MouseEvent } from \"react\"\nimport { Fab, Drawer, Button, Box, Typography } from \"@material-ui/core\"\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\"\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\"\nimport usePageTipStyles from \"./_config/style\"\nimport { IPageTip } from \"./_config/shape\"\nimport { AsyncTip } from \"./_partials\"\n\n/**\n * Renders a page tip tooltip at the bottom left of the page\n *\n * @param {string} {tip} File name (no extension) for the tip component\n * @returns ReactElement\n */\nconst PageTip = ({ tip }: IPageTip): ReactElement => {\n\tconst style = usePageTipStyles()\n\tconst [drawerOpen, setDrawerOpen] = useState<boolean>(false)\n\n\t/**\n\t * Toggles the state of the drawer\n\t *\n\t * @param {Boolean} open State to change the drawer to\n\t * @param {KeyboardEvent|MouseEvent<HTMLButtonElement>} event Event generated by a keypress|click\n\t */\n\tconst toggleDrawer = (open: boolean) => (\n\t\tevent: KeyboardEvent | MouseEvent<HTMLButtonElement>\n\t): void => {\n\t\tif (event instanceof KeyboardEvent) {\n\t\t\tif (\n\t\t\t\tevent.type === \"keydown\" &&\n\t\t\t\t(event.key === \"Tab\" || event.key === \"Shift\")\n\t\t\t) {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// Change the state of the drawer\n\t\tsetDrawerOpen(open)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className={style.root}>\n\t\t\t\t<Fab color=\"secondary\" onClick={toggleDrawer(true)} variant=\"extended\">\n\t\t\t\t\t<HelpOutlineIcon className={style.icon} />\n\t\t\t\t\tTips\n\t\t\t\t</Fab>\n\t\t\t</div>\n\t\t\t<Drawer\n\t\t\t\tanchor=\"left\"\n\t\t\t\topen={drawerOpen}\n\t\t\t\tonClose={toggleDrawer(false)}\n\t\t\t\tclasses={{\n\t\t\t\t\tpaper: style.drawer,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Box className={style.closeBox}>\n\t\t\t\t\t<Typography variant=\"h6\">Tips</Typography>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={toggleDrawer(false)}\n\t\t\t\t\t\tstartIcon={<HighlightOffIcon />}\n\t\t\t\t\t>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Box>\n\n\t\t\t\t<AsyncTip tip={tip} />\n\t\t\t</Drawer>\n\t\t</>\n\t)\n}\n\nexport default PageTip\n","import ILogicLayer from \"../_config/logicLayer\"\nimport HealthCheckDB from \"./HealthCheckDatabase\"\nimport {\n\tHealthCheckDataStruct,\n\tBaseHealthCheckStruct,\n\tHealthCheckId,\n\tClientId,\n} from \"../_config/shape\"\n\n/**\n * Logic implementation for the Health check database\n *\n * @class HealthCheckLogic\n * @extends {ILogicLayer<HealthCheckDataStruct, BaseHealthCheckStruct>}\n */\nclass HealthCheckLogic extends ILogicLayer<\n\tHealthCheckDataStruct,\n\tBaseHealthCheckStruct\n> {\n\t/**\n\t * Creates an instance of HealthCheckLogic.\n\t *\n\t * @memberof HealthCheckLogic\n\t */\n\tconstructor() {\n\t\tsuper(HealthCheckDB, HealthCheckDB.healthChecks)\n\t}\n\n\t/**\n\t * Finds a health check by the id and clientId\n\t *\n\t * @param {HealthCheckId} id\n\t * @param {ClientId} clientId\n\t * @returns {Promise<HealthCheckDataStruct>}\n\t * @memberof HealthCheckLogic\n\t */\n\tpublic findByClientId(\n\t\tid: HealthCheckId,\n\t\tclientId: ClientId\n\t): Promise<HealthCheckDataStruct | undefined> {\n\t\treturn this.database.transaction(\"r\", this.table.name, () => {\n\t\t\treturn this.table.where({ id, clientId }).first()\n\t\t})\n\t}\n\n\t/**\n\t * Finds all the health checks for a given client\n\t *\n\t * @param {ClientId} clientId\n\t * @returns {Promise<HealthCheckDataStruct[]>}\n\t * @memberof HealthCheckLogic\n\t */\n\tpublic findClientHealthChecks(\n\t\tclientId: ClientId\n\t): Promise<HealthCheckDataStruct[]> {\n\t\treturn this.database.transaction(\"r\", this.table.name, () => {\n\t\t\treturn this.table.where(\"clientId\").equals(clientId).toArray()\n\t\t})\n\t}\n}\n\n// Creates a instance of the logic class and exports the instance\nconst HealthCheckUseCase = new HealthCheckLogic()\n\nexport default HealthCheckUseCase\n","import { makeStyles } from \"@material-ui/core\"\n\n// eslint-disable-next-line import/prefer-default-export\nexport const useQuestionnaireStyles = makeStyles((theme) => ({\n\tactions: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tmarginTop: theme.spacing(5),\n\t\t[theme.breakpoints.up(\"sm\")]: {\n\t\t\tflexDirection: \"row\",\n\t\t\tjustifyContent: \"space-between\",\n\t\t},\n\t\t\"& button:first-child\": {\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\t\tmarginBottom: theme.spacing(1),\n\t\t\t},\n\t\t},\n\t},\n\tsubtitle: {\n\t\tmarginTop: theme.spacing(2),\n\t\tlineHeight: 1,\n\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\tmarginTop: theme.spacing(4),\n\t\t},\n\t},\n\ttitle: {\n\t\tmarginBottom: theme.spacing(3),\n\t\t[theme.breakpoints.down(\"sm\")]: {\n\t\t\tfontSize: theme.typography.h5.fontSize,\n\t\t},\n\t},\n}))\n\n// Option tile styles\nexport const useOptionTileStyles = makeStyles(() => ({\n\tcardContent: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\",\n\t},\n}))\n","import React, { ReactElement, MouseEvent } from \"react\"\nimport {\n\tCard,\n\tCardActionArea,\n\tCardContent,\n\tTypography,\n\tuseTheme,\n} from \"@material-ui/core\"\nimport { getOptionByAnswer } from \"../../_config/utilities\"\nimport { answerTheming } from \"../../_config/data\"\nimport { useOptionTileStyles } from \"../_config/styles\"\nimport { IQuestionnaireOptions } from \"../_config/shape\"\n\n/**\n * A single tile for the Health check questionnaire\n *\n * @param {QuestionOptions} {optionKey}\n * @param {string} {option}\n * @param {(QuestionOptions | boolean)} {currentAnswer}\n * @param {Function} {changeAnswer}\n * @returns ReactElement\n */\nconst OptionTile = ({\n\toptionKey,\n\toption,\n\tcurrentAnswer,\n\tchangeAnswer,\n}: IQuestionnaireOptions): ReactElement => {\n\tconst style = useOptionTileStyles()\n\tconst theme = getOptionByAnswer(optionKey, answerTheming)\n\tconst muiTheme = useTheme()\n\n\treturn (\n\t\t<Card\n\t\t\tonClick={(e: MouseEvent<HTMLDivElement>): void => {\n\t\t\t\tchangeAnswer(e, optionKey)\n\t\t\t}}\n\t\t\tstyle={{\n\t\t\t\tboxShadow:\n\t\t\t\t\tcurrentAnswer === optionKey\n\t\t\t\t\t\t? `inset 0 0 0 3px ${muiTheme.palette.primary.main}`\n\t\t\t\t\t\t: \"\",\n\t\t\t}}\n\t\t>\n\t\t\t<CardActionArea>\n\t\t\t\t<CardContent className={style.cardContent}>\n\t\t\t\t\t<Typography variant=\"h6\">{option}</Typography>\n\t\t\t\t\t<theme.Icon style={{ color: theme.color, fontSize: 50 }} />\n\t\t\t\t</CardContent>\n\t\t\t</CardActionArea>\n\t\t</Card>\n\t)\n}\n\nexport default OptionTile\n","import React, { ReactElement, useContext } from \"react\"\nimport { Typography } from \"@material-ui/core\"\nimport { useTheme } from \"@material-ui/core/styles\"\nimport { ClientContext } from \"../../state/client\"\n\n/**\n * Displays component if there is no current client\n *\n * @returns ReactElement\n */\nconst NoClientError = (): ReactElement => {\n\tconst theme = useTheme()\n\tconst {\n\t\tstate: { currentClient, clientSynced },\n\t} = useContext(ClientContext)\n\n\t/**\n\t * Checks if the current client is undefined after syncing with\n\t * the indexeddb\n\t *\n\t * @returns boolean\n\t */\n\tconst noClient = (): boolean =>\n\t\tclientSynced &&\n\t\t(typeof currentClient === \"undefined\" ||\n\t\t\ttypeof currentClient.id === \"undefined\")\n\n\treturn noClient() ? (\n\t\t<Typography\n\t\t\tvariant=\"h6\"\n\t\t\tcolor=\"error\"\n\t\t\tstyle={{ marginTop: theme.spacing(2), marginBottom: theme.spacing(2) }}\n\t\t>\n\t\t\tPlease select or add a client before continuing\n\t\t</Typography>\n\t) : (\n\t\t<></>\n\t)\n}\n\nexport default NoClientError\n","import React, { useState, ReactElement, useEffect, MouseEvent } from \"react\"\nimport {\n\tBox,\n\tGrid,\n\tButton,\n\tStepper,\n\tStep,\n\tStepLabel,\n\tStepContent,\n} from \"@material-ui/core\"\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\"\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\"\nimport { useHistory } from \"react-router-dom\"\nimport { useQuestionnaireStyles } from \"./_config/styles\"\nimport { questions } from \"../_config/data\"\nimport { IQuestionStructure, QuestionOptions } from \"../_config/shape\"\nimport { constructKey, generateKey } from \"../../../util/lists/key\"\nimport { routeVarReplacement, PrivateRoutes } from \"../../../util/routes/routes\"\nimport { OptionTile } from \"./_partials\"\nimport NoClientError from \"../../NoClientError\"\nimport HealthCheckUseCase from \"../../../data/healthChecks/HealthCheckLogic\"\nimport { newTimestamp } from \"../../../util/dates\"\nimport useCurrentClient from \"../../../state/client/useCurrentClient\"\n\n/**\n * Questionnaire component for the Health checks\n * handles the logic for answering and submitting the quiz\n *\n * @returns ReactElement\n */\nconst Questionnaire = (): ReactElement => {\n\tconst [currentClient] = useCurrentClient()\n\tconst styles = useQuestionnaireStyles()\n\tconst [answers, setAnswers] = useState<QuestionOptions[]>([])\n\tconst [questionCount, setQuestionCount] = useState<number>(0)\n\tconst [currentQuestion, setCurrentQuestion] = useState<IQuestionStructure>(\n\t\tquestions[questionCount]\n\t)\n\tconst [key] = useState(generateKey())\n\tconst history = useHistory()\n\tconst stepLabels: string[] = questions.map((q) => q.question)\n\n\tuseEffect(() => {\n\t\tsetCurrentQuestion(questions[questionCount])\n\t}, [questionCount])\n\n\t/**\n\t * Changes the selected answer for the current question\n\t *\n\t * @param {MouseEvent<HTMLDivElement>} e Change event from clicking on the option\n\t * @param {QuestionOptions} answer Answer that was selected\n\t * @returns void\n\t */\n\tconst changeAnswer = (\n\t\te: MouseEvent<HTMLDivElement>,\n\t\tanswer: QuestionOptions\n\t): void => {\n\t\te.preventDefault()\n\t\tconst copy = [...answers]\n\t\tcopy[questionCount] = answer\n\t\tsetAnswers([...copy])\n\t}\n\n\t/**\n\t * Conditional to check if the user is on the final question\n\t *\n\t * @returns boolean\n\t */\n\tconst isFinalQuestion = (): boolean => questionCount === questions.length - 1\n\n\t/**\n\t * Redirects to the summary page\n\t *\n\t * @param {number} id ID of the health check to redirect to\n\t */\n\tconst redirectToSummary = (id: string): void => {\n\t\thistory.push(\n\t\t\trouteVarReplacement(PrivateRoutes.HealthCheckSummary, [[\":id\", `${id}`]])\n\t\t)\n\t}\n\n\t/**\n\t * Submits the questionnaire and redirects to the summary page\n\t *\n\t * @async\n\t * @returns Promise<void>\n\t */\n\tconst handleSubmit = async (): Promise<void> => {\n\t\tif (!currentClient?.id) {\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\talert(\n\t\t\t\t\"A client needs to be selected, please add or select a client before submitting\"\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\tconst dbKey = await HealthCheckUseCase.create({\n\t\t\t\tclientId: currentClient.id,\n\t\t\t\tanswers,\n\t\t\t\tcreatedAt: newTimestamp(),\n\t\t\t})\n\t\t\tredirectToSummary(dbKey)\n\t\t} catch (e) {\n\t\t\t// TODO: Proper error checking\n\t\t\tconsole.error(e.stack || e)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Box>\n\t\t\t<NoClientError />\n\n\t\t\t<Stepper\n\t\t\t\tactiveStep={questionCount}\n\t\t\t\torientation=\"vertical\"\n\t\t\t\tstyle={{ paddingLeft: 0, paddingRight: 0 }}\n\t\t\t>\n\t\t\t\t{stepLabels.map(\n\t\t\t\t\t(label): ReactElement => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Step key={label}>\n\t\t\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\n\t\t\t\t\t\t\t\t<StepContent>\n\t\t\t\t\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t\t\t\t\t{(Object.keys(\n\t\t\t\t\t\t\t\t\t\t\tcurrentQuestion.options\n\t\t\t\t\t\t\t\t\t\t) as QuestionOptions[]).map(\n\t\t\t\t\t\t\t\t\t\t\t(option: QuestionOptions, idx: number): ReactElement => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={4} key={constructKey(key, idx)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<OptionTile\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionKey={option}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toption={currentQuestion.options[option]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeAnswer={changeAnswer}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentAnswer={answers[questionCount] || false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Box className={styles.actions}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tstartIcon={<ChevronLeftIcon />}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled={questionCount === 0}\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t\t\t\t\t\tsetQuestionCount(questionCount - 1)\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tPrevious question\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tendIcon={<ChevronRightIcon />}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled={typeof answers[questionCount] === \"undefined\"}\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t\t\t\t\t\tif (!isFinalQuestion()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetQuestionCount(questionCount + 1)\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleSubmit()\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{isFinalQuestion() ? \"View results\" : \"Next question\"}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</StepContent>\n\t\t\t\t\t\t\t</Step>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</Stepper>\n\t\t</Box>\n\t)\n}\n\nexport default Questionnaire\n","import React, { ReactElement } from \"react\"\nimport {\n\tTypography,\n\tGrid,\n\tList,\n\tListItem,\n\tListItemIcon,\n\tListItemText,\n} from \"@material-ui/core\"\nimport { Link } from \"react-router-dom\"\nimport ListIcon from \"@material-ui/icons/List\"\nimport { PageContainer } from \"../../components/Layouts\"\nimport PageTip from \"../../components/PageTip\"\nimport ExpandableNav from \"../../components/ExpandableNav\"\nimport { PrivateRoutes } from \"../../util/routes/routes\"\nimport Questionnaire from \"../../components/HealthCheck/Questionnaire/Questionnaire\"\n\n/**\n * Health check questionnaire page\n *\n * @returns ReactElement\n */\nconst HCQuestionnaire = (): ReactElement => {\n\treturn (\n\t\t<>\n\t\t\t<PageContainer>\n\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t<Grid item xs={12} md={9}>\n\t\t\t\t\t\t<Typography variant=\"h5\" align=\"center\">\n\t\t\t\t\t\t\tTen easy questions to learn more about the health of your business\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<Questionnaire />\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={12} md={3}>\n\t\t\t\t\t\t<ExpandableNav>\n\t\t\t\t\t\t\t<List component=\"nav\" disablePadding>\n\t\t\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\t\t\t\tto={PrivateRoutes.HealthCheckList}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t\t\t<ListIcon />\n\t\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t\t<ListItemText>List of Health Checks</ListItemText>\n\t\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t</ExpandableNav>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</PageContainer>\n\n\t\t\t<PageTip tip=\"HCQuestionnaire\" />\n\t\t</>\n\t)\n}\n\nexport default HCQuestionnaire\n"],"sourceRoot":""}