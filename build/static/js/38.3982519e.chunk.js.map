{"version":3,"sources":["components/HealthCheck/Questionnaire/_config/styles.ts","components/HealthCheck/Questionnaire/_partials/OptionTile.tsx","components/NoClientError/NoClientError.tsx","components/HealthCheck/Questionnaire/Questionnaire.tsx","pages/HealthCheck/questionnaire.tsx","content/tips lazy /^/.*$/ groupOptions: {} namespace object","components/PageTip/_config/style.ts","components/PageTip/_partials/AsyncTip.tsx","components/PageTip/PageTip.tsx","data/healthChecks/HealthCheckLogic.ts"],"names":["useQuestionnaireStyles","makeStyles","theme","actions","display","flexDirection","marginTop","spacing","breakpoints","up","justifyContent","down","marginBottom","subtitle","lineHeight","title","fontSize","typography","h5","useOptionTileStyles","cardContent","alignItems","OptionTile","optionKey","option","currentAnswer","changeAnswer","style","getOptionByAnswer","answerTheming","muiTheme","useTheme","Card","onClick","e","boxShadow","palette","primary","main","CardActionArea","CardContent","className","Typography","variant","Icon","color","NoClientError","useContext","ClientContext","state","currentClient","clientSynced","id","Questionnaire","useCurrentClient","styles","useState","answers","setAnswers","questionCount","setQuestionCount","questions","currentQuestion","setCurrentQuestion","generateKey","key","history","useHistory","stepLabels","map","q","question","useEffect","answer","preventDefault","copy","isFinalQuestion","length","handleSubmit","a","alert","HealthCheckUseCase","create","clientId","createdAt","newTimestamp","dbKey","push","routeVarReplacement","PrivateRoutes","HealthCheckSummary","console","error","stack","Box","Stepper","activeStep","orientation","paddingLeft","paddingRight","label","Step","StepLabel","StepContent","Grid","container","Object","keys","options","idx","item","xs","sm","constructKey","Button","startIcon","disabled","endIcon","HCQuestionnaire","md","align","ExpandableNav","List","component","disablePadding","ListItem","button","Link","to","HealthCheckList","ListItemIcon","ListItemText","PageTip","tip","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","module","exports","usePageTipStyles","root","position","left","bottom","icon","marginRight","drawer","padding","maxWidth","width","closeBox","paddingBottom","borderBottom","borderBottomColor","grey","borderBottomStyle","AsyncTip","loadable","props","fallback","Loading","drawerOpen","setDrawerOpen","toggleDrawer","open","event","KeyboardEvent","type","Fab","Drawer","anchor","onClose","classes","paper","HealthCheckDB","healthChecks","this","database","transaction","table","name","where","first","equals","toArray","ILogicLayer"],"mappings":"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","file":"static/js/38.3982519e.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\"\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const useQuestionnaireStyles = makeStyles((theme) => ({\r\n\tactions: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t\tmarginTop: theme.spacing(5),\r\n\t\t[theme.breakpoints.up(\"sm\")]: {\r\n\t\t\tflexDirection: \"row\",\r\n\t\t\tjustifyContent: \"space-between\",\r\n\t\t},\r\n\t\t\"& button:first-child\": {\r\n\t\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\t\tmarginBottom: theme.spacing(1),\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n\tsubtitle: {\r\n\t\tmarginTop: theme.spacing(2),\r\n\t\tlineHeight: 1,\r\n\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\tmarginTop: theme.spacing(4),\r\n\t\t},\r\n\t},\r\n\ttitle: {\r\n\t\tmarginBottom: theme.spacing(3),\r\n\t\t[theme.breakpoints.down(\"sm\")]: {\r\n\t\t\tfontSize: theme.typography.h5.fontSize,\r\n\t\t},\r\n\t},\r\n}))\r\n\r\n// Option tile styles\r\nexport const useOptionTileStyles = makeStyles(() => ({\r\n\tcardContent: {\r\n\t\tdisplay: \"flex\",\r\n\t\tflexDirection: \"column\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n}))\r\n","import React, { ReactElement, MouseEvent } from \"react\"\r\nimport {\r\n\tCard,\r\n\tCardActionArea,\r\n\tCardContent,\r\n\tTypography,\r\n\tuseTheme,\r\n} from \"@material-ui/core\"\r\nimport { getOptionByAnswer } from \"../../_config/utilities\"\r\nimport { answerTheming } from \"../../_config/data\"\r\nimport { useOptionTileStyles } from \"../_config/styles\"\r\nimport { IQuestionnaireOptions } from \"../_config/shape\"\r\n\r\n/**\r\n * A single tile for the Health check questionnaire\r\n *\r\n * @param {QuestionOptions} {optionKey}\r\n * @param {string} {option}\r\n * @param {(QuestionOptions | boolean)} {currentAnswer}\r\n * @param {Function} {changeAnswer}\r\n * @returns ReactElement\r\n */\r\nconst OptionTile = ({\r\n\toptionKey,\r\n\toption,\r\n\tcurrentAnswer,\r\n\tchangeAnswer,\r\n}: IQuestionnaireOptions): ReactElement => {\r\n\tconst style = useOptionTileStyles()\r\n\tconst theme = getOptionByAnswer(optionKey, answerTheming)\r\n\tconst muiTheme = useTheme()\r\n\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tonClick={(e: MouseEvent<HTMLDivElement>): void => {\r\n\t\t\t\tchangeAnswer(e, optionKey)\r\n\t\t\t}}\r\n\t\t\tstyle={{\r\n\t\t\t\tboxShadow:\r\n\t\t\t\t\tcurrentAnswer === optionKey\r\n\t\t\t\t\t\t? `inset 0 0 0 3px ${muiTheme.palette.primary.main}`\r\n\t\t\t\t\t\t: \"\",\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<CardActionArea>\r\n\t\t\t\t<CardContent className={style.cardContent}>\r\n\t\t\t\t\t<Typography variant=\"h6\">{option}</Typography>\r\n\t\t\t\t\t<theme.Icon style={{ color: theme.color, fontSize: 50 }} />\r\n\t\t\t\t</CardContent>\r\n\t\t\t</CardActionArea>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nexport default OptionTile\r\n","import React, { ReactElement, useContext } from \"react\"\r\nimport { Typography } from \"@material-ui/core\"\r\nimport { useTheme } from \"@material-ui/core/styles\"\r\nimport { ClientContext } from \"../../state/client\"\r\n\r\n/**\r\n * Displays component if there is no current client\r\n *\r\n * @returns ReactElement\r\n */\r\nconst NoClientError = (): ReactElement => {\r\n\tconst theme = useTheme()\r\n\tconst {\r\n\t\tstate: { currentClient, clientSynced },\r\n\t} = useContext(ClientContext)\r\n\r\n\t/**\r\n\t * Checks if the current client is undefined after syncing with\r\n\t * the indexeddb\r\n\t *\r\n\t * @returns boolean\r\n\t */\r\n\tconst noClient = (): boolean =>\r\n\t\tclientSynced &&\r\n\t\t(typeof currentClient === \"undefined\" ||\r\n\t\t\ttypeof currentClient.id === \"undefined\")\r\n\r\n\treturn noClient() ? (\r\n\t\t<Typography\r\n\t\t\tvariant=\"h6\"\r\n\t\t\tcolor=\"error\"\r\n\t\t\tstyle={{ marginTop: theme.spacing(2), marginBottom: theme.spacing(2) }}\r\n\t\t>\r\n\t\t\tPlease select or add a client before continuing\r\n\t\t</Typography>\r\n\t) : (\r\n\t\t<></>\r\n\t)\r\n}\r\n\r\nexport default NoClientError\r\n","import React, { useState, ReactElement, useEffect, MouseEvent } from \"react\"\nimport {\n\tBox,\n\tGrid,\n\tButton,\n\tStepper,\n\tStep,\n\tStepLabel,\n\tStepContent,\n} from \"@material-ui/core\"\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\"\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\"\nimport { useHistory } from \"react-router-dom\"\nimport { useQuestionnaireStyles } from \"./_config/styles\"\nimport { questions } from \"../_config/data\"\nimport { IQuestionStructure, QuestionOptions } from \"../_config/shape\"\nimport { constructKey, generateKey } from \"../../../util/lists/key\"\nimport { routeVarReplacement, PrivateRoutes } from \"../../../util/routes/routes\"\nimport { OptionTile } from \"./_partials\"\nimport NoClientError from \"../../NoClientError\"\nimport HealthCheckUseCase from \"../../../data/healthChecks/HealthCheckLogic\"\nimport { newTimestamp } from \"../../../util/dates\"\nimport useCurrentClient from \"../../../state/client/useCurrentClient\"\n\n/**\n * Questionnaire component for the Health checks\n * handles the logic for answering and submitting the quiz\n *\n * @returns ReactElement\n */\nconst Questionnaire = (): ReactElement => {\n\tconst [currentClient] = useCurrentClient()\n\tconst styles = useQuestionnaireStyles()\n\tconst [answers, setAnswers] = useState<QuestionOptions[]>([])\n\tconst [questionCount, setQuestionCount] = useState<number>(0)\n\tconst [currentQuestion, setCurrentQuestion] = useState<IQuestionStructure>(\n\t\tquestions[questionCount]\n\t)\n\tconst [key] = useState(generateKey())\n\tconst history = useHistory()\n\tconst stepLabels: string[] = questions.map((q) => q.question)\n\n\tuseEffect(() => {\n\t\tsetCurrentQuestion(questions[questionCount])\n\t}, [questionCount])\n\n\t/**\n\t * Changes the selected answer for the current question\n\t *\n\t * @param {MouseEvent<HTMLDivElement>} e Change event from clicking on the option\n\t * @param {QuestionOptions} answer Answer that was selected\n\t * @returns void\n\t */\n\tconst changeAnswer = (\n\t\te: MouseEvent<HTMLDivElement>,\n\t\tanswer: QuestionOptions\n\t): void => {\n\t\te.preventDefault()\n\t\tconst copy = [...answers]\n\t\tcopy[questionCount] = answer\n\t\tsetAnswers([...copy])\n\t}\n\n\t/**\n\t * Conditional to check if the user is on the final question\n\t *\n\t * @returns boolean\n\t */\n\tconst isFinalQuestion = (): boolean => questionCount === questions.length - 1\n\n\t/**\n\t * Redirects to the summary page\n\t *\n\t * @param {number} id ID of the health check to redirect to\n\t */\n\tconst redirectToSummary = (id: string): void => {\n\t\thistory.push(\n\t\t\trouteVarReplacement(PrivateRoutes.HealthCheckSummary, [[\":id\", `${id}`]])\n\t\t)\n\t}\n\n\t/**\n\t * Submits the questionnaire and redirects to the summary page\n\t *\n\t * @async\n\t * @returns Promise<void>\n\t */\n\tconst handleSubmit = async (): Promise<void> => {\n\t\tif (!currentClient?.id) {\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\talert(\n\t\t\t\t\"A client needs to be selected, please add or select a client before submitting\"\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\ttry {\n\t\t\tconst dbKey = await HealthCheckUseCase.create({\n\t\t\t\tclientId: currentClient.id,\n\t\t\t\tanswers,\n\t\t\t\tcreatedAt: newTimestamp(),\n\t\t\t})\n\t\t\tredirectToSummary(dbKey)\n\t\t} catch (e) {\n\t\t\t// TODO: Proper error checking\n\t\t\tconsole.error(e.stack || e)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Box>\n\t\t\t<NoClientError />\n\n\t\t\t<Stepper\n\t\t\t\tactiveStep={questionCount}\n\t\t\t\torientation=\"vertical\"\n\t\t\t\tstyle={{ paddingLeft: 0, paddingRight: 0 }}\n\t\t\t>\n\t\t\t\t{stepLabels.map(\n\t\t\t\t\t(label): ReactElement => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Step key={label}>\n\t\t\t\t\t\t\t\t<StepLabel>{label}</StepLabel>\n\t\t\t\t\t\t\t\t<StepContent>\n\t\t\t\t\t\t\t\t\t<Grid container spacing={2}>\n\t\t\t\t\t\t\t\t\t\t{(Object.keys(\n\t\t\t\t\t\t\t\t\t\t\tcurrentQuestion.options\n\t\t\t\t\t\t\t\t\t\t) as QuestionOptions[]).map(\n\t\t\t\t\t\t\t\t\t\t\t(option: QuestionOptions, idx: number): ReactElement => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={4} key={constructKey(key, idx)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<OptionTile\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toptionKey={option}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\toption={currentQuestion.options[option]}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeAnswer={changeAnswer}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentAnswer={answers[questionCount] || false}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Box className={styles.actions}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tstartIcon={<ChevronLeftIcon />}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled={questionCount === 0}\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t\t\t\t\t\tsetQuestionCount(questionCount - 1)\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tPrevious question\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tendIcon={<ChevronRightIcon />}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tdisabled={typeof answers[questionCount] === \"undefined\"}\n\t\t\t\t\t\t\t\t\t\t\tonClick={(e: MouseEvent<HTMLButtonElement>): void => {\n\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault()\n\t\t\t\t\t\t\t\t\t\t\t\tif (!isFinalQuestion()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetQuestionCount(questionCount + 1)\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleSubmit()\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{isFinalQuestion() ? \"View results\" : \"Next question\"}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</StepContent>\n\t\t\t\t\t\t\t</Step>\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</Stepper>\n\t\t</Box>\n\t)\n}\n\nexport default Questionnaire\n","import React, { ReactElement } from \"react\"\r\nimport {\r\n\tTypography,\r\n\tGrid,\r\n\tList,\r\n\tListItem,\r\n\tListItemIcon,\r\n\tListItemText,\r\n} from \"@material-ui/core\"\r\nimport { Link } from \"react-router-dom\"\r\nimport ListIcon from \"@material-ui/icons/List\"\r\nimport { PageContainer } from \"../../components/Layouts\"\r\nimport PageTip from \"../../components/PageTip\"\r\nimport ExpandableNav from \"../../components/ExpandableNav\"\r\nimport { PrivateRoutes } from \"../../util/routes/routes\"\r\nimport Questionnaire from \"../../components/HealthCheck/Questionnaire/Questionnaire\"\r\n\r\n/**\r\n * Health check questionnaire page\r\n *\r\n * @returns ReactElement\r\n */\r\nconst HCQuestionnaire = (): ReactElement => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<PageContainer>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t<Grid item xs={12} md={9}>\r\n\t\t\t\t\t\t<Typography variant=\"h5\" align=\"center\">\r\n\t\t\t\t\t\t\tTen easy questions to learn more about the health of your business\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Questionnaire />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} md={3}>\r\n\t\t\t\t\t\t<ExpandableNav>\r\n\t\t\t\t\t\t\t<List component=\"nav\" disablePadding>\r\n\t\t\t\t\t\t\t\t<ListItem\r\n\t\t\t\t\t\t\t\t\tbutton\r\n\t\t\t\t\t\t\t\t\tcomponent={Link}\r\n\t\t\t\t\t\t\t\t\tto={PrivateRoutes.HealthCheckList}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t\t\t\t<ListIcon />\r\n\t\t\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t\t\t<ListItemText>List of Health Checks</ListItemText>\r\n\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t</List>\r\n\t\t\t\t\t\t</ExpandableNav>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</PageContainer>\r\n\r\n\t\t\t<PageTip tip=\"HCQuestionnaire\" />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default HCQuestionnaire\r\n","var map = {\n\t\"./ActionChecklistTip\": [\n\t\t813,\n\t\t4\n\t],\n\t\"./ActionChecklistTip.tsx\": [\n\t\t813,\n\t\t4\n\t],\n\t\"./CFCanvasTip\": [\n\t\t814,\n\t\t5\n\t],\n\t\"./CFCanvasTip.tsx\": [\n\t\t814,\n\t\t5\n\t],\n\t\"./ChangeLevers\": [\n\t\t815,\n\t\t6\n\t],\n\t\"./ChangeLevers.tsx\": [\n\t\t815,\n\t\t6\n\t],\n\t\"./ClientListTips\": [\n\t\t816,\n\t\t7\n\t],\n\t\"./ClientListTips.tsx\": [\n\t\t816,\n\t\t7\n\t],\n\t\"./CoachingKitTips\": [\n\t\t817,\n\t\t8\n\t],\n\t\"./CoachingKitTips.tsx\": [\n\t\t817,\n\t\t8\n\t],\n\t\"./DiscoverTopicsTips\": [\n\t\t818,\n\t\t9\n\t],\n\t\"./DiscoverTopicsTips.tsx\": [\n\t\t818,\n\t\t9\n\t],\n\t\"./HCQuestionnaire\": [\n\t\t819,\n\t\t10\n\t],\n\t\"./HCQuestionnaire.tsx\": [\n\t\t819,\n\t\t10\n\t],\n\t\"./style\": [\n\t\t809,\n\t\t11\n\t],\n\t\"./style.ts\": [\n\t\t809,\n\t\t11\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 820;\nmodule.exports = webpackAsyncContext;","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nconst usePageTipStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tposition: \"fixed\",\r\n\t\tleft: theme.spacing(2),\r\n\t\tbottom: theme.spacing(2),\r\n\t},\r\n\ticon: {\r\n\t\tmarginRight: theme.spacing(1),\r\n\t},\r\n\tdrawer: {\r\n\t\tpadding: theme.spacing(2),\r\n\t\tmaxWidth: \"350px\",\r\n\t\twidth: \"100%\",\r\n\t},\r\n\tcloseBox: {\r\n\t\tdisplay: \"flex\",\r\n\t\tjustifyContent: \"space-between\",\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t\tpaddingBottom: theme.spacing(2),\r\n\t\tborderBottom: 1,\r\n\t\tborderBottomColor: theme.palette.grey[500],\r\n\t\tborderBottomStyle: \"solid\",\r\n\t},\r\n}))\r\n\r\nexport default usePageTipStyles\r\n","import React from \"react\"\r\nimport loadable from \"@loadable/component\"\r\nimport Loading from \"../../Loading\"\r\n\r\n/**\r\n * Loadable component to dynamically render the tip content\r\n *\r\n */\r\nconst AsyncTip = loadable(\r\n\t(props: { tip: string }) => import(`../../../content/tips/${props.tip}`),\r\n\t{\r\n\t\tfallback: <Loading />,\r\n\t}\r\n)\r\n\r\nexport default AsyncTip\r\n","import React, { ReactElement, useState, MouseEvent } from \"react\"\r\nimport { Fab, Drawer, Button, Box, Typography } from \"@material-ui/core\"\r\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\"\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\"\r\nimport usePageTipStyles from \"./_config/style\"\r\nimport { IPageTip } from \"./_config/shape\"\r\nimport { AsyncTip } from \"./_partials\"\r\n\r\n/**\r\n * Renders a page tip tooltip at the bottom left of the page\r\n *\r\n * @param {string} {tip} File name (no extension) for the tip component\r\n * @returns ReactElement\r\n */\r\nconst PageTip = ({ tip }: IPageTip): ReactElement => {\r\n\tconst style = usePageTipStyles()\r\n\tconst [drawerOpen, setDrawerOpen] = useState<boolean>(false)\r\n\r\n\t/**\r\n\t * Toggles the state of the drawer\r\n\t *\r\n\t * @param {Boolean} open State to change the drawer to\r\n\t * @param {KeyboardEvent|MouseEvent<HTMLButtonElement>} event Event generated by a keypress|click\r\n\t */\r\n\tconst toggleDrawer = (open: boolean) => (\r\n\t\tevent: KeyboardEvent | MouseEvent<HTMLButtonElement>\r\n\t): void => {\r\n\t\tif (event instanceof KeyboardEvent) {\r\n\t\t\tif (\r\n\t\t\t\tevent.type === \"keydown\" &&\r\n\t\t\t\t(event.key === \"Tab\" || event.key === \"Shift\")\r\n\t\t\t) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Change the state of the drawer\r\n\t\tsetDrawerOpen(open)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className={style.root}>\r\n\t\t\t\t<Fab color=\"secondary\" onClick={toggleDrawer(true)} variant=\"extended\">\r\n\t\t\t\t\t<HelpOutlineIcon className={style.icon} />\r\n\t\t\t\t\tTips\r\n\t\t\t\t</Fab>\r\n\t\t\t</div>\r\n\t\t\t<Drawer\r\n\t\t\t\tanchor=\"left\"\r\n\t\t\t\topen={drawerOpen}\r\n\t\t\t\tonClose={toggleDrawer(false)}\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\tpaper: style.drawer,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Box className={style.closeBox}>\r\n\t\t\t\t\t<Typography variant=\"h6\">Tips</Typography>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={toggleDrawer(false)}\r\n\t\t\t\t\t\tstartIcon={<HighlightOffIcon />}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Box>\r\n\r\n\t\t\t\t<AsyncTip tip={tip} />\r\n\t\t\t</Drawer>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default PageTip\r\n","import ILogicLayer from \"../_config/logicLayer\"\r\nimport HealthCheckDB from \"./HealthCheckDatabase\"\r\nimport {\r\n\tHealthCheckDataStruct,\r\n\tBaseHealthCheckStruct,\r\n\tHealthCheckId,\r\n\tClientId,\r\n} from \"../_config/shape\"\r\n\r\n/**\r\n * Logic implementation for the Health check database\r\n *\r\n * @class HealthCheckLogic\r\n * @extends {ILogicLayer<HealthCheckDataStruct, BaseHealthCheckStruct>}\r\n */\r\nclass HealthCheckLogic extends ILogicLayer<\r\n\tHealthCheckDataStruct,\r\n\tBaseHealthCheckStruct\r\n> {\r\n\t/**\r\n\t * Creates an instance of HealthCheckLogic.\r\n\t *\r\n\t * @memberof HealthCheckLogic\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper(HealthCheckDB, HealthCheckDB.healthChecks)\r\n\t}\r\n\r\n\t/**\r\n\t * Finds a health check by the id and clientId\r\n\t *\r\n\t * @param {HealthCheckId} id\r\n\t * @param {ClientId} clientId\r\n\t * @returns {Promise<HealthCheckDataStruct>}\r\n\t * @memberof HealthCheckLogic\r\n\t */\r\n\tpublic findByClientId(\r\n\t\tid: HealthCheckId,\r\n\t\tclientId: ClientId\r\n\t): Promise<HealthCheckDataStruct | undefined> {\r\n\t\treturn this.database.transaction(\"r\", this.table.name, () => {\r\n\t\t\treturn this.table.where({ id, clientId }).first()\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Finds all the health checks for a given client\r\n\t *\r\n\t * @param {ClientId} clientId\r\n\t * @returns {Promise<HealthCheckDataStruct[]>}\r\n\t * @memberof HealthCheckLogic\r\n\t */\r\n\tpublic findClientHealthChecks(\r\n\t\tclientId: ClientId\r\n\t): Promise<HealthCheckDataStruct[]> {\r\n\t\treturn this.database.transaction(\"r\", this.table.name, () => {\r\n\t\t\treturn this.table.where(\"clientId\").equals(clientId).toArray()\r\n\t\t})\r\n\t}\r\n}\r\n\r\n// Creates a instance of the logic class and exports the instance\r\nconst HealthCheckUseCase = new HealthCheckLogic()\r\n\r\nexport default HealthCheckUseCase\r\n"],"sourceRoot":""}